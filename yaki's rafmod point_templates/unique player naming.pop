///////////////////////////////////////////////
/// Yaki's Unique Player Naming Template	///
/// Sign Date: 9 Dec 21						///
///////////////////////////////////////////////

/// How this works
/// We can't trace a projectile or building owner ID back to the player by using "TestActivator" or "$TestEntity" on the player, *unless* we name the player the same ID.
/// To trace a projectile/building back to a player using TestActivator or $TestEntity, we name the player by setting the "targetname" of prop value "m_hOuter".
/// "m_hOuter" is the same as projectile "m_hOwnerEntity" prop value, or "m_hBuilder" prop value for buildings.
/// In this way, we can trace projectiles/buildings back to their owners, because both the name and projectile/building ID match.

	PlayerSpawnTemplate
	{
		Name "template_name_players"
	}
	
	PointTemplates
	{
		template_name_players
		{
	// names player every time they spawn
			OnSpawnOutput
			{
				Target "!activator"
				Action "$GetProp$m_hOuter"
				Param "!activator|$SetKey$targetname|"
				Delay 0.4
			}
			
	// Here, we have some filters you can use to find the player.
			OnSpawnOutput
			{
				Target "rafmod_filter_named_player_by_key"
				Action "FireUser1"
				Delay 0.4
			}
			filter_activator_name
			{
				"targetname" "rafmod_filter_named_player_by_key"
				"filtername" "z"
				"OnUser1" "!activator,$GetProp$m_hOuter,!caller|$SetKey$filtername|,0,1"	//sets the Filter to the !activator's weapon ID value.
			}
		}
	}
